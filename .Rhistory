sd.pooled2 <- (sd.A^2*(n.A-1)+sd.B^2*(n.B-1))/(n.A+n.B-2)
sd.pooled = sqrt(sd.pooled2)
t.value = (mean.A-mean.B)/sd.pooled/(1/n.A+1/n.B)
t.value = (mean.A-mean.B)/sd.pooled/(1/n.A+1/n.B)
t.value
pvalue = 1- pt(t.value,df = df)
pvalue
t.test(A,B)
mean.A
mean.Y
mean.B
21/1.8501
sd.pooled
t2 = (mean.A -mean.B) / sqrt(sd.A^2/n.A+sd.B^2/n.B)
t2
df2 =  (sd.A^2/n.A+sd.B^2/n.B)^2 / (sd.A^4/n.A/(n.A-1)+sd.B^4/n.B/(n.B-1))
df2
df2 =  (sd.A^2/n.A+sd.B^2/n.B)^2 / (sd.A^4/n.A^2/(n.A-1)+sd.B^4/n.B^2/(n.B-1))
t.test(A,B)
df2
1- t.test(t2, df2)
1 - t.test(t2, df2)
2*(1 - pt(t2, df2))
pvalue = 2*(1- pt(t.value,df = df))
pvalue
sqrt(sd.A^2/n.A+sd.B^2/n.B)
sd.A
sd.B
?t.test
t.test(A,B,var.equal = T)
t.value
sd.pooled2 <- (sd.A^2*(n.A-1)+sd.B^2*(n.B-1))/(n.A+n.B-2)
sd.pooled = sqrt(sd.pooled2)
t.value = (mean.A-mean.B)/(sd.pooled*(1/n.A+1/n.B))
t.value
df
sd.pooled
sd.B <- sd(B)
sd.B^2
sd.B
sd.A
t.test(A,B,var.equal = T)
s2 = var(c(A,B))
s2
s2 = sd(c(A,B))
1- pt(t.value,df = df)
t
pvalue = 2*(1- pt(t.value,df = df))
pvalue
t.test(A,B,var.equal = T)
t.value = (mean.A-mean.B)/(sd.pooled*(1/n.A+1/n.B)^(1/2))
t.value
## degree of freedom (multiple DIFFERENT WAYS!! )
df = n.A+n.B -2
pvalue = 2*(1- pt(t.value,df = df))
pvalue
x <- c(1.4, 1.2, 1.2, 1.3, 1.5, 1.0, 2.1,1.4,1.1)
s2 <- var(x)
qqnorm(x)
qqline(x)
s2 <- var(x)
sigma =0.4
ftest <- s2/sigma^2
ftest
chi.value <- s2/sigma^2
chi.value
n.x = length(x)
1-pchisq(chi.value,n.x-1)
pchisq(chi.value,n.x-1)
n.x-1
2*(1-pchisq(chi.value,n.x-1))
2*(pchisq(chi.value,n.x-1))
chisq.test(x)
x.new <- x[which(x==2.1)]
x.new
x <- c(1.4, 1.2, 1.2, 1.3, 1.5, 1.0, 2.1,1.4,1.1)
x.new <- x[-which(x==2.1)]
chisq.test(x.new)
x.new
qqnorm(x.new)
qqline(x.new)
chisq.test(x.new)
x
chisq.test(x)
x.new <- x[-which(x==2.1)]
qqnorm(x.new)
qqline(x.new)
chisq.test(x.new)
#1 t- test
A <- c(67,80,106,83,89)
B <- c(45,71,87,53)
#calculated by hand
mean.A <- mean(A)
sd.A <- sd(A)
n.A = length(A)
mean.B <- mean(B)
sd.B <- sd(B)
n.B = length(B)
sd.pooled2 <- (sd.A^2*(n.A-1)+sd.B^2*(n.B-1))/(n.A+n.B-2)
sd.pooled = sqrt(sd.pooled2)
t.value = (mean.A-mean.B)/(sd.pooled*(1/n.A+1/n.B)^(1/2))
t.value
## degree of freedom (multiple DIFFERENT WAYS!! )
df = n.A+n.B -2
pvalue = 2*(1- pt(t.value,df = df))
pvalue
t.test(A,B,var.equal = T)
## weltch's t test, for unequal variance
t2 = (mean.A -mean.B) / sqrt(sd.A^2/n.A+sd.B^2/n.B)
t2
df2 =  (sd.A^2/n.A+sd.B^2/n.B)^2 / (sd.A^4/n.A^2/(n.A-1)+sd.B^4/n.B^2/(n.B-1))
df2
2*(1 - pt(t2, df2))
t.test(A,B)
## from wikipedia : subtle difference:
# In statistics, Welch's t-test (or unequal variances t-test) is a two-sample location test,
# and is used to test the hypothesis
# that two populations have equal means. Welch's t-test is an adaptation of Student's t-test,
# and is more reliable when the two samples have unequal variances and unequal sample sizes.
# These tests are often referred to as "unpaired" or "independent samples" t-tests,
# as they are typically applied when the statistical units underlying the two samples being
# compared are non-overlapping.
## problem 2
x <- c(1.4, 1.2, 1.2, 1.3, 1.5, 1.0, 2.1,1.4,1.1)
qqnorm(x)
qqline(x)
s2 <- var(x)
n.x = length(x)
sigma =0.4
chi.value <- s2/sigma^2
chi.value
2*(pchisq(chi.value,n.x-1))
## in-buit test
chisq.test(x)
# data:  x
# X-squared = 0.60656, df = 8, p-value = 0.9997
#
# Warning message:
#   In chisq.test(x) : Chi-squared approximation may be incorrect
#delete potential outlier 2.1
x.new <- x[-which(x==2.1)]
qqnorm(x.new)
qqline(x.new)
chisq.test(x.new)
rm(list=ls())
rm(list=ls())
#1 t- test
A <- c(67,80,106,83,89)
B <- c(45,71,87,53)
#calculated by hand
mean.A <- mean(A)
sd.A <- sd(A)
n.A = length(A)
mean.B <- mean(B)
sd.B <- sd(B)
n.B = length(B)
sd.pooled2 <- (sd.A^2*(n.A-1)+sd.B^2*(n.B-1))/(n.A+n.B-2)
sd.pooled = sqrt(sd.pooled2)
t.value = (mean.A-mean.B)/(sd.pooled*(1/n.A+1/n.B)^(1/2))
t.value
## degree of freedom (multiple DIFFERENT WAYS!! )
df = n.A+n.B -2
pvalue = 2*(1- pt(t.value,df = df))
pvalue
t.test(A,B,var.equal = T)
## weltch's t test, for unequal variance
t2 = (mean.A -mean.B) / sqrt(sd.A^2/n.A+sd.B^2/n.B)
t2
df2 =  (sd.A^2/n.A+sd.B^2/n.B)^2 / (sd.A^4/n.A^2/(n.A-1)+sd.B^4/n.B^2/(n.B-1))
df2
2*(1 - pt(t2, df2))
t.test(A,B)
## from wikipedia : subtle difference:
# In statistics, Welch's t-test (or unequal variances t-test) is a two-sample location test,
# and is used to test the hypothesis
# that two populations have equal means. Welch's t-test is an adaptation of Student's t-test,
# and is more reliable when the two samples have unequal variances and unequal sample sizes.
# These tests are often referred to as "unpaired" or "independent samples" t-tests,
# as they are typically applied when the statistical units underlying the two samples being
# compared are non-overlapping.
## problem 2
x <- c(1.4, 1.2, 1.2, 1.3, 1.5, 1.0, 2.1,1.4,1.1)
qqnorm(x)
qqline(x)
s2 <- var(x)
n.x = length(x)
sigma =0.4
chi.value <- s2/sigma^2
chi.value
2*(pchisq(chi.value,n.x-1))
## in-buit test
chisq.test(x)
# data:  x
# X-squared = 0.60656, df = 8, p-value = 0.9997
#
# Warning message:
#   In chisq.test(x) : Chi-squared approximation may be incorrect
#delete potential outlier 2.1
x.new <- x[-which(x==2.1)]
qqnorm(x.new)
qqline(x.new)
chisq.test(x.new)
rm(list=ls())
#1 t- test
A <- c(67,80,106,83,89)
B <- c(45,71,87,53)
#calculated by hand
mean.A <- mean(A)
sd.A <- sd(A)
n.A = length(A)
mean.B <- mean(B)
sd.B <- sd(B)
n.B = length(B)
sd.pooled2 <- (sd.A^2*(n.A-1)+sd.B^2*(n.B-1))/(n.A+n.B-2)
sd.pooled = sqrt(sd.pooled2)
t.value = (mean.A-mean.B)/(sd.pooled*(1/n.A+1/n.B)^(1/2))
t.value
## degree of freedom (multiple DIFFERENT WAYS!! )
df = n.A+n.B -2
pvalue = 2*(1- pt(t.value,df = df))
pvalue
t.test(A,B,var.equal = T)
## weltch's t test, for unequal variance
t2 = (mean.A -mean.B) / sqrt(sd.A^2/n.A+sd.B^2/n.B)
t2
df2 =  (sd.A^2/n.A+sd.B^2/n.B)^2 / (sd.A^4/n.A^2/(n.A-1)+sd.B^4/n.B^2/(n.B-1))
df2
2*(1 - pt(t2, df2))
t.test(A,B)
## from wikipedia : subtle difference:
# In statistics, Welch's t-test (or unequal variances t-test) is a two-sample location test,
# and is used to test the hypothesis
# that two populations have equal means. Welch's t-test is an adaptation of Student's t-test,
# and is more reliable when the two samples have unequal variances and unequal sample sizes.
# These tests are often referred to as "unpaired" or "independent samples" t-tests,
# as they are typically applied when the statistical units underlying the two samples being
# compared are non-overlapping.
## problem 2
x <- c(1.4, 1.2, 1.2, 1.3, 1.5, 1.0, 2.1,1.4,1.1)
qqnorm(x)
qqline(x)
s2 <- var(x)
n.x = length(x)
sigma =0.4
chi.value <- s2/sigma^2
chi.value
2*(pchisq(chi.value,n.x-1))
## in-buit test
chisq.test(x)
# data:  x
# X-squared = 0.60656, df = 8, p-value = 0.9997
#
# Warning message:
#   In chisq.test(x) : Chi-squared approximation may be incorrect
#delete potential outlier 2.1
x.new <- x[-which(x==2.1)]
qqnorm(x.new)
qqline(x.new)
chisq.test(x.new)
rm(list=ls())  # clean up work space
setwd("/Users/SongWang/Stat/Teaching/stat424/code/project1")
Plastic <- read.csv("Project 1 data.csv")
# question 1: delete one row: last number in my ID is 9
Plastic <- Plastic[-9,]
# question 2:
#part a)
Plastic_ReactorA <- Plastic[which(Plastic$Reactor=='A'),]
Plastic_ReactorB <- Plastic[which(Plastic$Reactor=='B'),]
mean(Plastic_ReactorA$Temp)
mean(Plastic_ReactorB$Temp)
mean(Plastic$Temp)
mean(Plastic_ReactorA$Conv)
mean(Plastic_ReactorB$Conv)
mean(Plastic$Conv)
#part b): correlation coefficient between temperature and conversion, overall and by reactor
cor(Plastic$Temp,Plastic$Conv)
cor(Plastic_ReactorA$Temp, Plastic_ReactorA$Conv)
cor(Plastic_ReactorB$Temp, Plastic_ReactorB$Conv)
# part c): Comparative histograms of temperature and conversion, by reactor
layout(matrix(c(1,2)))
hist(Plastic_ReactorA$Temp)
hist(Plastic_ReactorB$Temp)
hist(Plastic_ReactorA$Conv)
hist(Plastic_ReactorB$Conv)
#part d):  A scatter plot of y = conversion vs. x = temperature,
# using all the data and symbols denoting reactor
layout(1) # change back to one plot a page
plot(Plastic$Temp, Plastic$Conv, col = Plastic$Reactor, pch = as.numeric(Plastic$Reactor))
title("scatter plot temp vs. conv")
legend('topleft', legend = c("reactor A", "reactor B"), col = c(1,2), pch = c(1,2))
#part e): A normal probability plot of the deviations about the individual reactor means
mean.vec <- (Plastic$Reactor =='A') * mean(Plastic_ReactorA$Conv)  +
(Plastic$Reactor =='B') * mean(Plastic_ReactorB$Conv)
deviations <- Plastic$Conv - mean.vec
qqnorm(deviations)
qqline(deviations)
qqnorm(devA <- Plastic_ReactorA$Conv-mean(Plastic_ReactorA$Conv) );qqline(devA)
qqnorm(devB <- Plastic_ReactorB$Conv-mean(Plastic_ReactorB$Conv) );qqline(devB)
# Question 3: Compare the outputs and report any interesting findings.
# This report should be very brief, just a few sentences.
#1, From the histogram, compare with reactor A, the conversion rate of reactor B is more spread;
# and they tend to take big or small values
#2, There is a strong linear relationship between conversion rate and temperature for reactor A
# this is not the case for reactor B, for the same temperature,
#there are types of different resutls.
#3, when put the deviations from reactor A and reactor B together, some of the points are clearly
# deviate from the line and so the normality is not satisfied in this case.
mean.temp = Plastic %>%
dplyr::group_by(Reactor) %>%
dplyr::summarise(mean(tempdir))
mean.temp
mean.temp = Plastic %>%
dplyr::group_by(Reactor) %>%
dplyr::summarise(mean(Temp))
require(dplyr)
mean.temp = Plastic %>%
dplyr::group_by(Reactor) %>%
dplyr::summarise(mean(Temp))
mean.temp
cor(Plastic$Temp, Plastic$Conv)
corr.Reactor = Plastic %>%
dplyr::group_by(Reactor) %>%
dplyr::summarise(cor(Temp,Conv))
corr.Reactor
paint <- c(69,83,74,61,78,69,59,65,64,52,71,64,55,65,59,59,67,58,70,75,74,62,74,74)
paint <- matrix(paint, nrow=6, byrow = FALSE)
paint
paint <- data.frame(paint)
names(paint) <- c("GS","FD", "L","ZK")
library(ggplot)
layout(matrix(1:4))
layout.show(4)
dotchar(paint$GS)
dotchart(paint$GS)
dotchart(paint$GS)
paint$GS
dotchart(paint$GS)
dotchart(paint$GS)
dotchart(paint$GS)
layout(1)
plot(paint$GS,1, col="red")
layout(1)
plot(paint$GS,1, col="red")
plot(paint$GS,rep(1,6), col="red")
plot(paint$GS,rep(1,6), col="red")
points(paint$FD, rep(2,6), col="blue")
points(paint$L, rep(3,6), col="green")
points(paint$ZK, rep(4,6))
plot(paint$GS,rep(1,6), col="red", ylim=c(0.5,4.5))
points(paint$FD, rep(2,6), col="blue")
points(paint$L, rep(3,6), col="green")
points(paint$ZK, rep(4,6))
range(paint)
plot(paint$GS,rep(1,6), col="red", ylim=c(0.5,4.5), ylim= range(paint))
points(paint$FD, rep(2,6), col="blue")
points(paint$L, rep(3,6), col="green")
points(paint$ZK, rep(4,6))
plot(paint$GS,rep(1,6), col="red",method = 'jitter',ylim=c(0.5,4.5), ylim= range(paint))
plot(paint$GS,rep(1,6), col="red",method = 'jitter',ylim=c(0.5,4.5), xlim= range(paint))
plot(paint$GS,rep(1,6), col="red",method = 'jitter',ylim=c(0.5,4.5), xlim= range(paint))
points(paint$FD, rep(2,6), method = 'jitter', col="blue")
points(paint$L, rep(3,6), method = 'jitter', col="green")
points(paint$ZK, rep(4,6), method = 'jitter')
layout(1)
plot(paint$GS,rep(1,6), col="red",ylim=c(0.5,4.5), xlim= range(paint))
points(paint$FD, rep(2,6),  col="blue")
points(paint$L, rep(3,6), col="green")
points(paint$ZK, rep(4,6))
paint$GS <- rep(1,6,rep(0,18))
wear <- c(69,83,74,61,78,69,59,65,64,52,71,64,55,65,59,59,67,58,70,75,74,62,74,74)
paint$GS <- c(rep(1,6),rep(0,18))
paint$FD <- c(rep(0,6), rep(1,6),rep(0,12))
paint$L <- c(rep(0,12), rep(1,6),rep(0,6))
paint$ZK <- c(rep(1,18),rep(0,6))
paint$wear <- wear
paint=list()
paint$GS <- c(rep(1,6),rep(0,18))
paint$FD <- c(rep(0,6), rep(1,6),rep(0,12))
paint$L <- c(rep(0,12), rep(1,6),rep(0,6))
paint$ZK <- c(rep(1,18),rep(0,6))
paint$wear <- wear
paint
paint <- data.frame(paint)
paint
paint$GS <- as.factor(paint$GS)
paint$GS <- as.factor(paint$GS)
paint$GS <- as.factor(paint$GS)
paint$FD <- as.factor(paint$FD)
paint$L  <- as.factor(paint$L)
paint$ZK <- as.factor(paint$ZK)
aov1 <- aov(wear~., data = paint)
aov1
rep(1:6,4)
wear <- c(69,83,74,61,78,69,59,65,64,52,71,64,55,65,59,59,67,58,70,75,74,62,74,74)
paint=list()
paint$supplier <- c(rep("GS",6),rep("FD",6),rep("L",6),rep("zK",6))
paint$site <- rep(1:6,4)
paint$wear <- wear
paint <- data.frame(paint)
layout(1)
plot(paint$wear[1:6],rep(1,6), col="red",ylim=c(0.5,4.5), xlim= range(paint))
points(paint$wear[7:12], rep(2,6),  col="blue")
points(paint$wear[13:18], rep(3,6), col="green")
points(paint$wear[19:24], rep(4,6))
plot(paint$wear[1:6],rep(1,6), col="red",ylim=c(0.5,4.5), xlim= range(paint$wear))
points(paint$wear[7:12], rep(2,6),  col="blue")
points(paint$wear[13:18], rep(3,6), col="green")
points(paint$wear[19:24], rep(4,6))
aov1 <- aov(wear~., data = paint)
aov1
summary(aov1)
paint$site <- as.factor(paint$site) # change site from int type to factor type
aov1 <- aov(wear~., data = paint)
summary(aov1)
sov1$resid
aov1$resid
qqline(aov1$resid,col = paint$supplier)
qqnorm(aov1$resid,col = paint$supplier)
qqline(aov1$residuals)
plot(aov1)
plot(aov1 ,which = 1)
plot(aov1 ,which = 1)  # residuels vs fitted
plot(aov1, which =2)
plot(aov1, which =3)
layout(matrix(1:4,2, byrow = T))
plot(aov1)
boxplot(wear~supplier,data =paint)
layout(1)
boxplot(wear~supplier,data =paint)
plot(paint$wear[1:6],rep(1,6), col="red",ylim=c(0.5,4.5), xlim= range(paint$wear))
points(paint$wear[7:12], rep(2,6),  col="blue")
points(paint$wear[13:18], rep(3,6), col="green")
points(paint$wear[19:24], rep(4,6))
boxplot(wear~supplier,data =paint)
#graphical analysis
plot(paint$wear[1:6],rep(1,6), col="red",ylim=c(0.5,4.5), xlim= range(paint$wear))
points(paint$wear[7:12], rep(2,6),  col="blue")
points(paint$wear[13:18], rep(3,6), col="green")
points(paint$wear[19:24], rep(4,6))
mean.wear.by.supplier = paint %>%
dplyr::group_by(supplier) %>%
dplyr::summarise(mean(wear))
require(dplyr)
mean.wear.by.supplier = paint %>%
dplyr::group_by(supplier) %>%
dplyr::summarise(mean(wear))
mean.wear.by.supplier
mean.wear.by.site = paint %>%
dplyr::group_by(site) %>%
dplyr::summarise(mean(wear))
mean.wear.by.site
aov1$effects
aov1 <- aov(wear~supplier+site, data = paint)
summary(aov1)
aov1$effects
aov1$coefficients
mean.wear.by.supplier
boxplot(wear~site, data = paint)
plot(wear ~ site, data = paint)
paint %>% dplyr:: group_by(site) %>% dplyr::summarize(max(wear))
paint %>%
dplyr:: group_by(site) %>%
dplyr::summarize(mean(wear))
wear <- c(69,83,74,61,78,69,59,65,64,52,71,64,55,65,59,59,67,58,70,75,74,62,74,74)
paint=list()
paint$supplier <- c(rep("GS",6),rep("FD",6),rep("L",6),rep("zK",6))
paint$site <- rep(1:6,4)
paint$wear <- wear
paint <- data.frame(paint)
plot(paint$wear[1:6],rep(1,6), col="red",ylim=c(0.5,4.5), xlim= range(paint$wear))
points(paint$wear[7:12], rep(2,6),  col="blue")
points(paint$wear[13:18], rep(3,6), col="green")
points(paint$wear[19:24], rep(4,6))
boxplot(wear~supplier,data =paint)
paint$site <- as.factor(paint$site) # change site from int type to factor type
aov1 <- aov(wear~supplier+site, data = paint)
summary(aov1)
aov1$effects
wear <- c(69,83,74,61,78,69,59,65,64,52,71,64,55,65,59,59,67,58,70,75,74,62,74,74)
paint=list()
paint$supplier <- c(rep("GS",6),rep("FD",6),rep("L",6),rep("zK",6))
paint$site <- rep(1:6,4)
paint$wear <- wear
paint <- data.frame(paint)
plot(paint$wear[1:6],rep(1,6), col="red",ylim=c(0.5,4.5), xlim= range(paint$wear))
points(paint$wear[7:12], rep(2,6),  col="blue")
points(paint$wear[13:18], rep(3,6), col="green")
points(paint$wear[19:24], rep(4,6))
layout(1)
boxplot(wear~supplier,data =paint)
# pontentially ,there is one outliter
boxplot(wear~site, data = paint)
plot(wear ~ site, data = paint)
layout(1)
boxplot(wear~supplier,data =paint)
paint$site <- as.factor(paint$site) # change site from int type to factor type
aov1 <- aov(wear~supplier+site, data = paint)
summary(aov1)
plot(aov1 ,which = 1)  # residuels vs fitted
plot(aov1, which =2)   # norm Q-Q
plot(aov1, which =3)  # use to see if there are outliers or not
qqnorm(aov1$resid,col = paint$supplier)
qqline(aov1$residuals)
require(dplyr)
mean.wear.by.supplier = paint %>%
dplyr::group_by(supplier) %>%
dplyr::summarise(mean(wear))
mean.wear.by.supplier
paint[which(supplier=="GZ"),]
paint[which(supplier=="GS"),]
paint[which(paint$supplier=="GS"),]
mean ( paint[which(paint$supplier=="GS"),]$wear)
